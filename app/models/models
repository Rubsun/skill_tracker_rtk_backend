from uuid import UUID, uuid4
from typing import List
from sqlalchemy import (
    String, ForeignKey, Text, DateTime, Enum, Float, CheckConstraint, UniqueConstraint
)
from sqlalchemy.orm import Mapped, mapped_column, relationship
import enum
from datetime import datetime, timezone

from ..models.meta import Base


class UserRoleEnum(enum.Enum):
    """User roles."""
    manager = "manager"
    employee = "employee"


class TaskStatusEnum(enum.Enum):
    """Task statuses."""
    pending = "pending"
    incorrect = "incorrect"
    done = "done"


class ContentTypeEnum(enum.Enum):
    """Types of course content."""
    task = "task"
    theory = "theory"


class UserRole(Base):
    """
    The model for the association between users and their roles in the system.

    Attributes:
        id (UUID): The unique identifier for the user role record (primary key).
        role (UserRoleEnum): The role of the user, which can be 'manager' or 'employee'.
        user_id (UUID): A foreign key referencing the users table, indicating the user to whom this role is assigned.

    Relationships:
        user (User): A relationship with the user to whom this role belongs.
    """
    __tablename__ = 'user_roles'

    id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid4)
    role: Mapped[UserRoleEnum] = mapped_column(Enum(UserRoleEnum), nullable=False)
    user_id: Mapped[UUID] = mapped_column(ForeignKey('users.id', ondelete='CASCADE'))
    
    user: Mapped['User'] = relationship('User', back_populates='roles')
    

class User(Base):
    """
    The model for users in the system.

    Attributes:
        id (UUID): The unique identifier for the user (primary key).
        given_name (str): The user's first name, non-null, max 50 chars.
        family_name (str): The user's last name, non-null, max 100 chars.
        username (str): The user's unique username, non-null, max 100 chars.
        password_hash (str): The hashed password of the user, non-null, max 255 chars.

    Relationships:
        roles (List[UserRole]): A relationship with the UserRole model, indicating the roles assigned to the user.
        manager_courses (List[Course]): A relationship with the Course model, indicating the courses managed by the user.
        employee_courses (List[CourseEmployee]): A relationship with the CourseEmployee model, indicating the courses assigned to the user.
        comments (List[Comment]): A relationship with the Comment model, indicating the comments made by the user.
    """
    __tablename__ = 'users'

    id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid4)
    given_name: Mapped[str] = mapped_column(String(50), nullable=False)
    family_name: Mapped[str] = mapped_column(String(100), nullable=False)
    username: Mapped[str] = mapped_column(String(100), unique=True, nullable=False)
    password_hash: Mapped[str] = mapped_column(String(255), nullable=False)

    roles: Mapped[List['UserRole']] = relationship('UserRole', back_populates='user', cascade="all, delete-orphan")
    manager_courses: Mapped[List['Course']] = relationship('Course', back_populates='manager', cascade="all, delete-orphan")
    employee_courses: Mapped[List['CourseEmployee']] = relationship('CourseEmployee', back_populates='employee', cascade="all, delete-orphan")
    comments: Mapped[List['Comment']] = relationship('Comment', back_populates='user', cascade="all, delete-orphan")

    # def is_manager(self):
    #     return any(role.role == UserRole.manager for role in self.roles)

    # def is_employee(self):
    #     return any(role.role == UserRole.employee for role in self.roles)


class Course(Base):
    """
    The model for courses in the system.

    Attributes:
        id (UUID): The unique identifier for the course (primary key).
        title (str): The title of the course, non-null, max 200 chars.
        description (str): The description of the course, optional.
        deadline (datetime): The deadline for the course, optional.
        created_at (datetime): The timestamp when the course was created, non-null.
        manager_id (UUID): A foreign key referencing the users table, indicating the manager responsible for the course.

    Relationships:
        manager (User): A relationship with the User model, indicating the manager of the course.
        course_contents (List[CourseContent]): A relationship with the CourseContent model, indicating the contents of the course.
    """
    __tablename__ = 'courses'
    
    id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid4)
    title: Mapped[str] = mapped_column(String(200), nullable=False)
    description: Mapped[str] = mapped_column(Text)
    deadline: Mapped[datetime] = mapped_column(DateTime(timezone=True))
    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), nullable=False, default=lambda: datetime.now(timezone.utc))
    manager_id: Mapped[UUID] = mapped_column(ForeignKey('users.id', ondelete="CASCADE"), nullable=False)

    manager: Mapped['User'] = relationship('User', back_populates='manager_courses')
    course_contents: Mapped[List['CourseContent']] = relationship('CourseContent', back_populates='course', cascade="all, delete-orphan")


class CourseEmployee(Base):
    """
    The model for the association between users (employees) and courses.

    Attributes:
        id (UUID): The unique identifier for the course employee record (primary key).
        progress (float): The employee's progress in the course (range 0.0 to 100.0).
        assigned_at (datetime): The timestamp when the employee was assigned to the course.
        course_id (UUID): A foreign key referencing the courses table, indicating the course the employee is assigned to.
        employee_id (UUID): A foreign key referencing the users table, indicating the employee.

    Relationships:
        course (Course): A relationship with the Course model, indicating the course the employee is associated with.
        employee (User): A relationship with the User model, indicating the employee assigned to the course.
    """
    __tablename__ = 'course_employees'

    __table_args__ = (
        UniqueConstraint('course_id', 'user_id', name='uq_course_employee'),
        CheckConstraint('progress >= 0.0 AND progress <= 100.0', name='chk_course_progress_range'),
    )

    id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid4)
    progress: Mapped[float] = mapped_column(Float, default=0.0, nullable=False)
    assigned_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), nullable=False, default=lambda: datetime.now(timezone.utc))
    course_id: Mapped[UUID] = mapped_column(ForeignKey('courses.id', ondelete="CASCADE"))
    employee_id: Mapped[UUID] = mapped_column(ForeignKey('users.id', ondelete="CASCADE"))

    course: Mapped['Course'] = relationship('Course', back_populates="course_employees")
    employee: Mapped['User'] = relationship('User', back_populates="employee_courses")


class CourseContent(Base):
    """
    Course content model (task, theory).
    
    This model can store both tasks and theory associated with a course.
    """
    __tablename__ = 'course_contents'

    id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid4)
    content_type: Mapped[ContentTypeEnum] = mapped_column(Enum(ContentTypeEnum), nullable=False)
    deadline: Mapped[datetime] = mapped_column(DateTime(timezone=True))
    status: Mapped[TaskStatusEnum] = mapped_column(Enum(TaskStatusEnum), nullable=False, default=TaskStatusEnum.pending)
    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), nullable=False, default=lambda: datetime.now(timezone.utc))
    course_id: Mapped[UUID] = mapped_column(ForeignKey('courses.id', ondelete="CASCADE"))
    task_id: Mapped[UUID] = mapped_column(ForeignKey('tasks.id', ondelete="CASCADE"))
    theory_id: Mapped[UUID] = mapped_column(ForeignKey('theories.id', ondelete="CASCADE"))
    
    course: Mapped['Course'] = relationship('Course', back_populates='course_contents')
    task: Mapped['Task'] = relationship('Task', back_populates='course_contents', uselist=False)
    theory: Mapped['Theory'] = relationship('Theory', back_populates='course_contents', uselist=False)
    comments: Mapped[List['Comment']] = relationship('Comment', back_populates='course_content', cascade="all, delete-orphan")


class Task(Base):
    """
    The model for tasks within a course.

    Attributes:
        id (UUID): The unique identifier for the task (primary key).
        question (str): The question or prompt for the task, non-null, max 200 chars.
        answer (str): The answer for the task, non-null, max 200 chars.

    Relationships:
        course_contents (List[CourseContent]): A relationship with the CourseContent model, indicating that the task is part of a course's content.
    """
    __tablename__ = 'tasks'

    id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid4)
    question: Mapped[str] = mapped_column(String(200), nullable=False)
    answer: Mapped[str] = mapped_column(String(200), nullable=False)
    
    course_contents: Mapped[List['CourseContent']] = relationship('CourseContent', back_populates='task')


class Theory(Base):
    """
    The model for theoretical content within a course.

    Attributes:
        id (UUID): The unique identifier for the theory (primary key).
        title (str): The title of the theory, non-null, max 200 chars.
        description (str): The text description of the theory, non-null.

    Relationships:
        course_contents (List[CourseContent]): A relationship with the CourseContent model, indicating that the theory is part of a course's content.
    """
    __tablename__ = 'theories'

    id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid4)
    title: Mapped[str] = mapped_column(String(200), nullable=False)
    description: Mapped[str] = mapped_column(Text, nullable=False)
    
    course_contents: Mapped[List['CourseContent']] = relationship('CourseContent', back_populates='theory')


class Comment(Base):
    """
    The model for comments on course content (tasks or theories).

    Attributes:
        id (UUID): The unique identifier for the comment (primary key).
        text (str): The text of the comment, non-null.
        created_at (datetime): The timestamp when the comment was created.
        course_content_id (UUID): A foreign key referencing the course_contents table, indicating which content the comment belongs to.
        user_id (UUID): A foreign key referencing the users table, indicating the user who wrote the comment.

    Relationships:
        course_content (CourseContent): A relationship with the CourseContent model, indicating which content the comment is associated with.
        user (User): A relationship with the User model, indicating the user who wrote the comment.
    """
    __tablename__ = 'comments'

    id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid4)
    text: Mapped[str] = mapped_column(Text, nullable=False)
    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), nullable=False, default=lambda: datetime.now(timezone.utc))
    course_content_id: Mapped[UUID] = mapped_column(ForeignKey('course_contents.id', ondelete="CASCADE"), nullable=False)
    user_id: Mapped[UUID] = mapped_column(ForeignKey('users.id', ondelete="CASCADE"), nullable=False)

    course_content: Mapped['CourseContent'] = relationship('CourseContent', back_populates='comments')
    user: Mapped['User'] = relationship('User', back_populates='comments')
