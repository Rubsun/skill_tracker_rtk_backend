"""Create basic tables

Revision ID: 62e6bcd9a179
Revises: 
Create Date: 2025-06-05 23:19:01.936347

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import os

from migrations.utils.triggers import apply_sql_files_from_directory, drop_triggers_and_functions_from_directory


# revision identifiers, used by Alembic.
revision: str = '62e6bcd9a179'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

triggers_dir = os.path.join(os.path.dirname(__file__), '..', '..', 'sql', 'triggers', 'create_basic_tables')


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tasks',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('question', sa.String(length=200), nullable=False),
    sa.Column('answer', sa.String(length=200), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tasks')),
    schema='public'
    )
    op.create_table('theories',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_theories')),
    schema='public'
    )
    op.create_table('users',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('given_name', sa.String(length=50), nullable=False),
    sa.Column('family_name', sa.String(length=100), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('username', name=op.f('uq_users_username')),
    schema='public'
    )
    op.create_table('courses',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('passing_percent', sa.Integer(), nullable=False),
    sa.Column('is_produced', sa.Boolean(), nullable=False),
    sa.Column('deadline', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('manager_id', sa.Uuid(), nullable=False),
    sa.CheckConstraint('passing_percent >= 0 AND passing_percent <= 100', name=op.f('ck_courses_chk_passing_percent_range')),
    sa.ForeignKeyConstraint(['manager_id'], ['public.users.id'], name=op.f('fk_courses_manager_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_courses')),
    schema='public'
    )
    op.create_table('user_roles',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('role', sa.Enum('manager', 'employee', name='userroleenum'), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['public.users.id'], name=op.f('fk_user_roles_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_roles')),
    schema='public'
    )
    op.create_table('contents',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('deadline', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('course_id', sa.Uuid(), nullable=False),
    sa.Column('task_id', sa.Uuid(), nullable=True),
    sa.Column('theory_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['public.courses.id'], name=op.f('fk_contents_course_id_courses'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['public.tasks.id'], name=op.f('fk_contents_task_id_tasks'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['theory_id'], ['public.theories.id'], name=op.f('fk_contents_theory_id_theories'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_contents')),
    sa.UniqueConstraint('course_id', 'task_id', name='uq_course_task'),
    sa.UniqueConstraint('course_id', 'theory_id', name='uq_course_theory'),
    schema='public'
    )
    op.create_table('course_employees',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('is_completed', sa.Boolean(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('course_id', sa.Uuid(), nullable=False),
    sa.Column('employee_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['public.courses.id'], name=op.f('fk_course_employees_course_id_courses'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['employee_id'], ['public.users.id'], name=op.f('fk_course_employees_employee_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_course_employees')),
    sa.UniqueConstraint('course_id', 'employee_id', name='uq_course_employee'),
    schema='public'
    )
    op.create_table('comments',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('content_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['content_id'], ['public.contents.id'], name=op.f('fk_comments_content_id_contents'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['public.users.id'], name=op.f('fk_comments_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_comments')),
    schema='public'
    )
    # ### end Alembic commands ###

    apply_sql_files_from_directory(triggers_dir)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('comments', schema='public')
    op.drop_table('course_employees', schema='public')
    op.drop_table('contents', schema='public')
    op.drop_table('user_roles', schema='public')
    op.drop_table('courses', schema='public')
    op.drop_table('users', schema='public')
    op.drop_table('theories', schema='public')
    op.drop_table('tasks', schema='public')
    # ### end Alembic commands ###

    drop_triggers_and_functions_from_directory(triggers_dir)
